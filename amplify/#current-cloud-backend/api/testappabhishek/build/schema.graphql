
type Workflow {
  workflowName: String!
  workflowdefinitions(filter: ModelWorkflowDefinitionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelWorkflowDefinitionConnection
  WorkFlowJSON: AWSJSON!
  WorkFlowDescription: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type WorkflowDefinition {
  workflowdefinitionid: String!
  NodeName: String!
  NextNodeName: [String!]!
  Description: String!
  WorkFlowName: String!
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  workflowWorkflowdefinitionsId: ID
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelWorkflowConnection {
  items: [Workflow]!
  nextToken: String
}

input ModelWorkflowFilterInput {
  workflowName: ModelStringInput
  WorkFlowJSON: ModelStringInput
  WorkFlowDescription: ModelStringInput
  and: [ModelWorkflowFilterInput]
  or: [ModelWorkflowFilterInput]
  not: ModelWorkflowFilterInput
}

type Query {
  getWorkflow(workflowName: String!): Workflow
  listWorkflows(workflowName: String, filter: ModelWorkflowFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelWorkflowConnection
  getWorkflowDefinition(id: ID!): WorkflowDefinition
  listWorkflowDefinitions(filter: ModelWorkflowDefinitionFilterInput, limit: Int, nextToken: String): ModelWorkflowDefinitionConnection
  nodeByNodeandWorkFlowName(NodeName: String!, WorkFlowName: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelWorkflowDefinitionFilterInput, limit: Int, nextToken: String): ModelWorkflowDefinitionConnection
}

input ModelWorkflowConditionInput {
  WorkFlowJSON: ModelStringInput
  WorkFlowDescription: ModelStringInput
  and: [ModelWorkflowConditionInput]
  or: [ModelWorkflowConditionInput]
  not: ModelWorkflowConditionInput
}

input CreateWorkflowInput {
  workflowName: String!
  WorkFlowJSON: AWSJSON!
  WorkFlowDescription: String!
}

input UpdateWorkflowInput {
  workflowName: String!
  WorkFlowJSON: AWSJSON
  WorkFlowDescription: String
}

input DeleteWorkflowInput {
  workflowName: String!
}

type Mutation {
  createWorkflow(input: CreateWorkflowInput!, condition: ModelWorkflowConditionInput): Workflow
  updateWorkflow(input: UpdateWorkflowInput!, condition: ModelWorkflowConditionInput): Workflow
  deleteWorkflow(input: DeleteWorkflowInput!, condition: ModelWorkflowConditionInput): Workflow
  createWorkflowDefinition(input: CreateWorkflowDefinitionInput!, condition: ModelWorkflowDefinitionConditionInput): WorkflowDefinition
  updateWorkflowDefinition(input: UpdateWorkflowDefinitionInput!, condition: ModelWorkflowDefinitionConditionInput): WorkflowDefinition
  deleteWorkflowDefinition(input: DeleteWorkflowDefinitionInput!, condition: ModelWorkflowDefinitionConditionInput): WorkflowDefinition
}

type Subscription {
  onCreateWorkflow: Workflow @aws_subscribe(mutations: ["createWorkflow"])
  onUpdateWorkflow: Workflow @aws_subscribe(mutations: ["updateWorkflow"])
  onDeleteWorkflow: Workflow @aws_subscribe(mutations: ["deleteWorkflow"])
  onCreateWorkflowDefinition: WorkflowDefinition @aws_subscribe(mutations: ["createWorkflowDefinition"])
  onUpdateWorkflowDefinition: WorkflowDefinition @aws_subscribe(mutations: ["updateWorkflowDefinition"])
  onDeleteWorkflowDefinition: WorkflowDefinition @aws_subscribe(mutations: ["deleteWorkflowDefinition"])
}

type ModelWorkflowDefinitionConnection {
  items: [WorkflowDefinition]!
  nextToken: String
}

input ModelWorkflowDefinitionFilterInput {
  workflowdefinitionid: ModelStringInput
  NodeName: ModelStringInput
  NextNodeName: ModelStringInput
  Description: ModelStringInput
  WorkFlowName: ModelStringInput
  and: [ModelWorkflowDefinitionFilterInput]
  or: [ModelWorkflowDefinitionFilterInput]
  not: ModelWorkflowDefinitionFilterInput
  workflowWorkflowdefinitionsId: ModelIDInput
}

input ModelWorkflowDefinitionConditionInput {
  workflowdefinitionid: ModelStringInput
  NodeName: ModelStringInput
  NextNodeName: ModelStringInput
  Description: ModelStringInput
  WorkFlowName: ModelStringInput
  and: [ModelWorkflowDefinitionConditionInput]
  or: [ModelWorkflowDefinitionConditionInput]
  not: ModelWorkflowDefinitionConditionInput
  workflowWorkflowdefinitionsId: ModelIDInput
}

input CreateWorkflowDefinitionInput {
  workflowdefinitionid: String!
  NodeName: String!
  NextNodeName: [String!]!
  Description: String!
  WorkFlowName: String!
  id: ID
  workflowWorkflowdefinitionsId: ID
}

input UpdateWorkflowDefinitionInput {
  workflowdefinitionid: String
  NodeName: String
  NextNodeName: [String!]
  Description: String
  WorkFlowName: String
  id: ID!
  workflowWorkflowdefinitionsId: ID
}

input DeleteWorkflowDefinitionInput {
  id: ID!
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}

